export const login = async (req, res) => {

  const { email, password } = req.body;

  //checking whether pasword and login fields are filled or not 
  if (!email || !password) {
    return res.status(422).json({ message: "All fields should be filled" })
  }

  let loggedUser;

  try {
    loggedUser = await User.findOne({ email: email });

    if (!loggedUser) {
      return res.status(404).json({ message: "Email is not found, Check it and try again" })
    }
    //checking password and compare it with exist user's password in the db
    const isPasswordCorrect = bcrypt.compareSync(password, loggedUser.password);
    if (!isPasswordCorrect) {
      return res.status(400).json({ message: "Invalid password, Check it and try again" })
    }
    const token = CreateToken(loggedUser._id);

    //Create and setting a cookie with the user's ID and token
    res.cookie(String(loggedUser._id), token, {
      path: "/",
      expires: new Date(Date.now() + 1000 * 59),
      httpOnly: true,//if this option isn't here cookie will be visible to the frontend
      sameSite: "lax"
    })

    //send this message along with logged user details
    return res.status(200).json({ message: "Successfully logged in", User: loggedUser })
  } catch (err) {
    console.log(err)
  }
}
export const checkRole = (requiredRoles) => async (req, res, next) => {
    try {
      const convertedRoles = requiredRoles.map(role => role.toLowerCase());
      const userId = req.userId;
      const user = await User.findById(userId);
  
      const userRole = user.role;
      if (!convertedRoles.includes(userRole.toLowerCase())) {
        return res.status(403).json({ message: 'You are unauthorized' });
      }
      next();
   } catch (err) {
   return res.status(500).json({message:'Authorization error occurred',err});
   }
  };
  export const logout = (req, res) => {
    const cookies = req.headers.cookie;//request cookie from the header
  
    //extracting token from the cookies
    const previousToken = cookies.split("=")[1];
  
    //if token is not found return this response
    if (!previousToken) {
      return res.status(400).json({ message: "Couldn't find token" });
    }
  
    //varifying token using secret key from the environmental variables
    jsonwebtoken.verify(String(previousToken), process.env.JWTAUTHSECRET, 
    (err, user) => {
      if (err) {
        console.log(err);
        return res.status(403).json({ message: "Authentication failed" });
    //if not verified return this error
      }
      res.clearCookie(`${user.id}`);
      req.cookies[`${user.id}`] = "";
      return res.status(200).json({ message: "Successfully Logged Out" });
    });
  };

  export const getAllUsers = async (req, res) => {
    try {
      const allusers = await User.find();
      if (!allusers) {
        return res.status(404).json({ message: "There are not any users" });
      }
      else {
        res.status(200).json({ allusers })
      }
    } catch (error) {
      console.log(error);
      return res.status(500).json({ message: "Error in getting the Users" })
    }
  }